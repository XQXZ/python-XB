#游戏编程
#场景范围为(x,y) 0<=x<=10, 0<=y<=10
#生成一只乌龟和十条鱼
#移动方向随机
#乌龟可移动1或2，鱼移动1
#当移动到场景边缘，自动向反方向移动
#乌龟初始体力为100（上限），每移动一次体力消耗1
#乌龟坐标和鱼重叠，乌龟吃掉鱼且体力增加20
#鱼无体力
#当乌龟体力为0或者鱼的数量为0游戏结束

import random as r
#存储边界
legal_x = [0,10]
legal_y = [0,10]

#乌龟类
class Turtle:
    def __init__(self):
        self.power = 100        #体力
        #初始位置
        self.x = r.randint(legal_x[0], legal_x[1])
        self.y = r.randint(legal_y[0], legal_y[1])

    def move(self):
        #随机移动位置
        new_x = self.x + r.choice([1, 2, -1, -2])
        new_y = self.y + r.choice([1, 2, -1, -2])
        #检查移动后是否超出边界
        if new_x < legal_x[0]:
            self.x = legal_x[0]-(new_x - legal_x[0])
        elif new_x > legal_x[1]:
            self.x = legal_x[1] - (new_x - legal_x[1])
        else:
            self.x = new_x

        if new_y < legal_y[0]:
            self.y = legal_y[0]-(new_y - legal_y[0])
        elif new_y > legal_y[1]:
            self.y = legal_y[1] - (new_y - legal_y[1])
        else:
            self.y = new_y
        #体力消耗
        self.power -= 1
        #返回移动后的新位置
        return (self.x, self.y)

    def eat(self):
        self.power += 20
        if self.power > 100:
            self.power = 100

#鱼类
class Fish:
    def __init__(self):
        # 初始位置
        self.x = r.randint(legal_x[0], legal_x[1])
        self.y = r.randint(legal_y[0], legal_y[1])
    def move(self):
        # 随机移动位置
        new_x = self.x + r.choice([1, -1])
        new_y = self.y + r.choice([1, -1])
        # 检查移动后x,y是否超出边界
        if new_x < legal_x[0]:
            self.x = legal_x[0] - (new_x - legal_x[0])
        elif new_x > legal_x[1]:
            self.x = legal_x[1] - (new_x - legal_x[1])
        else:
            self.x = new_x

        if new_y < legal_y[0]:
            self.y = legal_y[0] - (new_y - legal_y[0])
        elif new_y > legal_y[1]:
            self.y = legal_y[1] - (new_y - legal_y[1])
        else:
            self.y = new_y
        #返回移动后的新位置
        return (self.x, self.y)

turtle = Turtle()
#十条鱼
fish = []
for i in range(10):
    new_fish = Fish()
    fish.append(new_fish)

while True:
    if not len(fish):
        print("鱼儿被吃光啦，game over。")
        break
    if not turtle.power:
        print("乌龟体力耗尽，鱼儿胜利！")
        break

    pos = turtle.move()
    #将列表拷贝给迭代器
    for each_fish in fish[:]:
        if each_fish.move() == pos:
            turtle.eat()
            fish.remove(each_fish)
            print("有条鱼儿被吃掉了。")
